#!/bin/bash -i

# Copyright 2016-2020 Faraz Fallahi <fffaraz@gmail.com>
# docweb is not responsible for misuse or for any damage that you may cause!
# You agree that you use this software at your own risk.

if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

if [ $# -lt 1 ]; then
	echo "Usage: docweb COMMAND [ARGS]"
	exit 1
fi

if [ "$1" == "rm" ]; then
	# Remove stopped containers
	stopped_containers=$(docker ps -q -f status=exited)
	[ ! -z "$stopped_containers" ] && docker rm $stopped_containers

	# Remove orphaned images
	dangling_images=$(docker images -q -f dangling=true)
	[ ! -z "$dangling_images" ] && docker rmi $dangling_images

	# Remove orphaned volumes
	dangling_volumes=$(docker volume ls -q -f dangling=true)
	[ ! -z "$dangling_volumes" ] && docker volume rm $dangling_volumes

	exit 0
fi

if [ "$1" == "rm:all" ]; then
	$0 rm

	# Remove all containers and volumes
	containers=$(docker ps -a -q)
	[ ! -z "$containers" ] && docker stop $containers
	[ ! -z "$containers" ] && docker rm $containers

	volumes=$(docker volume ls -q)
	[ ! -z "$volumes" ] && docker volume rm $volumes

	$0 rm
	exit 0
	# TODO: docker system prune
	# https://github.com/RobLoach/docker-clean
fi

if [ "$1" == "rm:img" ]; then
	# Remove all images
	docker rmi $(docker images -q)
	exit 0
fi

if [ "$1" == "build" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb build IMAGE"
		exit 1
	fi
	if [ ! -d /opt/dockerweb/$1 ]; then
		echo "Directory /opt/dockerweb/$1 doesn't exist"
		exit 1
	fi
	cd /opt/dockerweb/$1
	docker build --no-cache -t fffaraz/$1:latest --rm=true -f Dockerfile .
	cd ~-
	exit 0
fi

if [ "$1" == "build:all" ] || [ "$1" == "build:core" ]; then
	set -euxo pipefail

	$0 build proxy/base
	$0 build proxy
	$0 build balancer

	$0 build web/php7nginx/base
	$0 build web/php7nginx

	$0 build web/php7apache

	$0 build app/phpmyadmin

	echo DONE
	exit 0
fi

if [ "$1" == "stats" ]; then
	shift
	echo
	uname -a
	echo
	docweb hostname
	hostname --all-fqdns
	hostname --all-ip-addresses
	echo
	lsb_release -a
	echo
	/usr/lib/update-notifier/apt-check --human-readable
	echo
	apt list --upgradable
	echo
	uptime
	echo
	w -i
	echo
	free -h
	echo
	vmstat
	echo
	df -h | grep --color=never -e Filesystem -e '^/dev/'
	echo
	df -i | grep --color=never -e Filesystem -e '^/dev/'
	echo
	iostat
	echo
	ss -s
	#docker system df
	#smem -tw
	#smem -tu

	echo
	echo --------------------------------------------------------------------------------
	echo

	docker stats --no-stream $(docker ps --format={{.Names}})
	# alias ds='while true; do TEXT=$(docker stats --no-stream $(docker ps --format={{.Names}})); sleep 0.1; clear; echo "$TEXT"; done'
	# https://www.datadoghq.com/blog/how-to-collect-docker-metrics/

	if [ "$1" == "-f" ]; then
		#cat /etc/lsb-release
		#cat /proc/cpuinfo
		#cat /proc/meminfo
		#cat /proc/mdstat
		#cat cat /etc/os-release
		#cat cat /etc/lsb-release
		#dmesg | grep Memory
		#lsof +D /home
		#dstat -tdD total 60

		echo
		echo --------------------------------------------------------------------------------
		echo
		echo Disk Usage:
		echo
		#du -sm /home/*
		du -sh /home/*

		echo
		echo --------------------------------------------------------------------------------
		echo
		echo Number of Files:
		echo
		for i in $(find /home/* -maxdepth 0 -type d); do
			echo -n $i" : "
			find $i -type f | wc -l
		done

	fi
	echo
	exit 0
fi

if [ "$1" == "ps" ]; then
	shift
	if [ $# -lt 1 ]; then
		docker ps -a -s --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Size}}"
		exit 0
	fi
	docker exec "$1" ps -o user,comm,pid,ppid,pgid,time,vsz,rss,args
	exit 0
fi

if [ "$1" == "status" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb status NAME"
		exit 1
	fi
	# user,group,comm,pid,ppid,pgid,etime,nice,rgroup,ruser,time,tty,vsz,stat,rss,args
	RESULT=$(docker exec "$1" ps -axo user,comm,pid,ppid,pgid,time,vsz,rss,args | grep -v "ps -axo ")
	echo "$RESULT" | grep -v "php-fpm: pool webuser"
	echo "$RESULT" | grep "php-fpm: pool webuser"
	# killall -9 php
	exit 0
fi

if [ "$1" == "run" ]; then
	shift

	RUNARGS="-d --restart=always"
	if [ "$1" == "--debug" ]; then
		shift
		RUNARGS="-it --rm"
	fi
	if [ "$1" == "--bash" ]; then
		shift
		RUNARGS="-it --rm --entrypoint /bin/bash"
	fi

	HTTPPORT=""
	if [ "$1" == "--direct" ]; then
		shift
		HTTPPORT="-p $1:80"
		echo "Exposing HTTP Port $1"
		shift
	fi

	SSHPORT=""
	if [ $# -eq 4 ]; then
		SSHPORT="-e WEBUSER_PASSWORD=$3 -p $4:22"
		echo "Exposing SSH Port $4"
	fi

	if [ $# -lt 2 ]; then
		echo "Usage: docweb run [--debug|--bash] [--direct PORT] IMAGE NAME [WEBUSER_PASSWORD SSH_PORT]"
		exit 1
	fi

	if [[ "$(docker images -q fffaraz/web/$1:latest 2> /dev/null)" == "" ]]; then
		echo "Docker image fffaraz/web/$1:latest doesn't exist"
		exit 1
	fi

	if [ "$2" == "proxy" ]; then
		echo "The name 'proxy' is reserved for the reverse proxy server container"
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} $2 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop $2
		docker rm $2
	fi

	mkdir -p /home/$2

	docker run $RUNARGS \
	--name=$2 \
	--hostname=$2 \
	--net=isolated_nw \
	--volume=/home/$2:/home/webuser \
	-w=/home/webuser \
	--memory=512m \
	$HTTPPORT \
	$SSHPORT \
	fffaraz/web/$1:latest
	# --ulimit <type>=<soft limit>[:<hard limit>]
	# --ulimit nproc=64:64
	# --memory-swap=512m
	# --kernel-memory=8M
	# --cap-drop=all --cap-add=NET_BIND_SERVICE

	exit 0
fi

if [ "$1" == "log" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb log NAME"
		exit 1
	fi
	docker logs -f $1
	exit 0
fi

if [ "$1" == "stop" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb stop NAME"
		exit 1
	fi
	docker stop --time 86400 $1
	#docker kill $1
	#docker kill --signal TERM $1
	docker rm $1
	exit 0
fi

if [ "$1" == "exec" ]; then
	shift
	RUNASROOT=0
	if [ "$1" = "--root" ]; then
		shift
		RUNASROOT=1
	fi

	if [ $# -lt 1 ]; then
		echo "Usage: docweb exec [--root] NAME"
		exit 1
	fi

	if [ $RUNASROOT -eq 1 ]; then
		docker exec -it -e COLUMNS=$COLUMNS -e LINES=$LINES -e TERM=$TERM $1 /bin/bash -c 'cd /home/webuser/www; exec /bin/bash -i -l'
	else
		docker exec -it --user webuser -e COLUMNS=$COLUMNS -e LINES=$LINES -e TERM=$TERM $1 /bin/bash -c 'cd /home/webuser/www; exec /bin/bash -i -l'
	fi

	exit 0
fi

if [ "$1" == "clean" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb clean NAME"
		exit 1
	fi
	if [ ! -d /home/$1 ]; then
		echo "Directory /home/$1 doesn't exist"
		exit 1
	fi
	rm -rf /home/$1/tmp
	rm -rf /home/$1/log
	exit 0
fi

if [ "$1" == "update" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb update NAME [args]"
		exit 1
	fi
	docker exec -it $1 /script_update.sh $@
	exit 0
fi

if [ "$1" == "backup" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb backup NAME"
		exit 1
	fi
	if [ ! -d /home/$1 ]; then
		echo "Directory /home/$1 doesn't exist"
		exit 1
	fi
	if [ "$1" == "backup" ]; then
		echo "Can't backup the backup directory!"
		exit 1
	fi
	mkdir -p /home/backup
	FILEPATH=/home/backup/$1_$(date +%Y-%m-%d_%H-%M-%S).tar.gz
	# TODO: pigz
	tar --exclude=$1/backup --exclude=$1/log --exclude=$1/tmp --directory=/home -czf $FILEPATH $1
	ls -lh $FILEPATH
	#gzip -v -t $FILEPATH
	exit 0
fi

if [ "$1" == "log:nginx" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb log:nginx NAME [--access | --error]"
		exit 1
	fi
	if [ ! -d /home/$1 ]; then
		echo "Directory /home/$1 doesn't exist"
		exit 1
	fi
	if [ $# -eq 2 ] && [ "$2" == "--access" ]; then
		tail -f /home/$1/log/nginx/access.log
	elif [ $# -eq 2 ] && [ "$2" == "--error" ]; then
		tail -f /home/$1/log/nginx/error.log
	else
		tail -f /home/$1/log/nginx/*.log
	fi
	exit 0
fi

if [ "$1" == "log:php" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb log:php NAME [--access | --error | --mail]"
		exit 1
	fi
	if [ ! -d /home/$1 ]; then
		echo "Directory /home/$1 doesn't exist"
		exit 1
	fi
	if [ $# -eq 2 ] && [ "$2" == "--access" ]; then 
		tail -f /home/$1/log/php/access.log
	elif [ $# -eq 2 ] && [ "$2" == "--error" ]; then
		tail -f /home/$1/log/php/error.log
	elif [ $# -eq 2 ] && [ "$2" == "--mail" ]; then
		tail -f /home/$1/log/php/mail.log
	else
		tail -f /home/$1/log/php/*.log
	fi
	exit 0
fi

if [ "$1" == "proxy:run" ]; then
	shift
	# docweb proxy:run [--debug] [SERVER_NAME]
	ISRUNNING=$(docker inspect --format={{.State.Running}} proxy 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop proxy
		docker rm proxy
	fi

	RUNARG="-d --restart=always"
	if [ "$1" = "--debug" ]; then
		shift
		RUNARG="-it --rm"
	fi

	mkdir -p /home/proxy
	mkdir -p /home/proxy/ssl/etc
	mkdir -p /home/proxy/ssl/lib
	mkdir -p /home/proxy/ssl/log
	mkdir -p /home/proxy/ssl/default

	docker run $RUNARG \
	--name=proxy \
	--hostname=$(docweb hostname) \
	--net=isolated_nw \
	--memory=512m \
	-p 80:80 -p 443:443 \
	-v /home/proxy:/home/webuser \
	-v /home/proxy/ssl/etc:/etc/letsencrypt \
	-v /home/proxy/ssl/lib:/var/lib/letsencrypt \
	-v /home/proxy/ssl/log:/var/log/letsencrypt \
	-v /home/proxy/ssl/default:/opt/nginx/conf/cert \
	-e CERTEMAIL="fffaraz@gmail.com" \
	fffaraz/proxy:latest \
	$@

	exit 0
fi

if [ "$1" == "proxy:update" ]; then
	shift
	docker exec -i proxy /script_update.sh $@
	exit 0
fi

if [ "$1" == "balancer:run" ]; then
	shift
	ISRUNNING=$(docker inspect --format={{.State.Running}} balancer 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop balancer
		docker rm balancer
	fi

	RUNARG="-d --restart=always"
	if [ "$1" = "--debug" ]; then
		shift
		RUNARG="-it --rm"
	fi

	mkdir -p /home/balancer
	docker run $RUNARG \
	--name=balancer \
	--net=isolated_nw \
	--memory=512m \
	-v /home/balancer:/home/webuser \
	fffaraz/balancer:latest

	exit 0
fi

if [ "$1" == "balancer:update" ]; then
	shift
	docker exec -i balancer /script_update.sh $@
	exit 0
fi

if [ "$1" == "proxy:log" ]; then
	shift
	if [ $# -eq 1 ] && [ "$1" == "--trafic" ]; then
		tail -f /home/proxy/log/nginx/trafic.log
	elif [ $# -eq 1 ] && [ "$1" == "--error" ]; then
		tail -f /home/proxy/log/nginx/error.log
	else
		tail -f /home/proxy/log/nginx/*.log
	fi
	exit 0
fi

if [ "$1" == "proxy:status" ]; then
	shift
	# https://github.com/lebinh/ngxtop
	# https://github.com/allinurl/goaccess
	exit 0
fi

if [ "$1" == "hostname" ]; then
	shift
	H1=$(hostname --fqdn)
	H2=$(hostnamectl --static)
	[ ${#H1} -ge ${#H2} ] && echo $H1 || echo $H2
	exit 0
fi

if [ "$1" == "ip" ]; then
	shift
	IPV4=$(dig +short myip.opendns.com @208.67.222.222 a) || IPV4=""
	echo "Your IPv4 address is: $IPV4"
	IPV6=$(dig +short myip.opendns.com @2620:0:ccc::2 aaaa) || IPV6=""
	echo "Your IPv6 address is: $IPV6"
	exit 0
fi

if [ "$1" == "microdns:run" ]; then
	shift

	DNSTTL="-ttl 3600"
	if [ "$1" = "--ttl" ]; then
		shift
		DNSTTL="-ttl $1"
		shift
	fi

	DNSLOG=""
	if [ "$1" = "--log" ]; then
		shift
		DNSLOG="-log"
	fi

	#curl -s http://whatismyip.akamai.com/
	IPV4=$(dig +short myip.opendns.com @208.67.222.222 a) || IPV4=""
	echo "Your IPv4 address is: $IPV4"
	IPV6=$(dig +short myip.opendns.com @2620:0:ccc::2 aaaa) || IPV6=""
	echo "Your IPv6 address is: $IPV6"

	[ ! -z "$IPV4" ] && IPV4="-ipv4 $IPV4"
	[ ! -z "$IPV6" ] && IPV6="-ipv6 $IPV6"

	ISRUNNING=$(docker inspect --format={{.State.Running}} microdns 2> /dev/null)
	[ $? -eq 0 ] &&	docker rm -f microdns

	mkdir -p /home/microdns
	[ ! -f /home/microdns/dns.conf ] && echo "# domain. IPv4 IPv6" > /home/microdns/dns.conf

	docker run -d --restart=always \
	--name microdns -p 53:53 -p 53:53/udp \
	--memory 16m \
	-v /home/microdns:/home \
	fffaraz/microdns:latest \
	$IPV4 $IPV6 $DNSTTL $DNSLOG -conf /home/dns.conf

	exit 0
fi

if [ "$1" == "microdns:log" ]; then
	docker logs -f --tail 1000 microdns
	exit 0
fi

if [ "$1" == "bind:run" ]; then
	shift

	ISRUNNING=$(docker inspect --format={{.State.Running}} bind 2> /dev/null)
	[ $? -eq 0 ] &&	docker rm -f bind

	mkdir -p /home/bind

	docker run -d --restart=always \
	--name bind --memory 64m \
	--hostname=$(docweb hostname) \
	-p 53:53 -p 53:53/udp \
	-v /home/bind:/data \
	fffaraz/bind

	exit 0
fi

if [ "$1" == "bind:webmin" ]; then
	shift

	if [ $# -lt 2 ]; then
		echo "Usage: docweb bind:webmin ROOT_PASSWORD WEBMIN_ENABLED"
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} bindwebmin 2> /dev/null)
	[ $? -eq 0 ] &&	docker rm -f bindwebmin

	mkdir -p /home/bindwebmin

	docker run -d --restart=always \
	--name bindwebmin --memory 128m \
	--hostname=$(docweb hostname) \
	-p 53:53 -p 53:53/udp -p 90:10000 \
	-v /home/bindwebmin:/data \
	-e ROOT_PASSWORD="$1" \
	-e WEBMIN_ENABLED="$2" \
	fffaraz/bindwebmin

	exit 0
fi

if [ "$1" == "coredns:run" ]; then
	shift
	# https://github.com/miekg/coredns
	exit 0
fi

if [ "$1" == "pma:run" ]; then
	shift

	RUNARG="-d --restart=always"
	if [ "$1" = "--debug" ]; then
		shift
		RUNARG="-it --rm"
	fi

	HTTPPORT=""
	if [ "$1" = "--direct" ]; then
		shift
		HTTPPORT="-p $1:80"
		echo "Exposing HTTP Port $1"
		shift
	fi

	if [ $# -lt 2 ]; then
		echo "Usage: docweb pma:run [--debug] [--direct PORT] MYSQLSERVER MYSQLROOTPASSWORD [pma status] [CaptchaPublic CaptchaPrivate]"
		# TODO: controluser controlpass pmadb
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} ${1}_pma 2> /dev/null)
	[ $? -eq 0 ] &&	docker rm -f ${1}_pma

	PHPMYADMIN=pma
	PHPSTATUS=status
	if [ $# -eq 4 ]; then
		PHPMYADMIN=$3
		PHPSTATUS=$4
	fi

	CaptchaPublic=
	CaptchaPrivate=
	if [ $# -eq 6 ]; then
		CaptchaPublic=$5
		CaptchaPrivate=$6
	fi

	docker run $RUNARG \
	--name=${1}_pma \
	--net=isolated_nw \
	--memory=512m \
	$HTTPPORT \
	-e MYSQL_SERVER="$1" \
	-e MYSQL_ROOT_PASSWORD="$2" \
	-e PHPMYADMIN="$PHPMYADMIN" \
	-e PHPSTATUS="$PHPSTATUS" \
	-e CaptchaPublic="$CaptchaPublic" \
	-e CaptchaPrivate="$CaptchaPrivate" \
	fffaraz/app/phpmyadmin:latest

	exit 0
fi

if [ "$1" == "glances:run" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb glances:run HASH"
		exit 1
	fi

	killall glances
	#mkdir -p /etc/glances
	#echo -n $1 > /etc/glances/glances.pwd
	mkdir -p ~/.config/glances
	echo -n $1 > ~/.config/glances/glances.pwd

	if [ $# -gt 1 ]; then
		nohup glances -w -B 172.17.0.1 --disable-plugin $2 --password &
	else
		nohup glances -w -B 172.17.0.1 --password &
	fi
	exit 0
fi

if [ "$1" == "redis:run" ]; then
	shift

	RUNARGS="-d --restart=always"
	if [ "$1" == "--debug" ]; then
		shift
		RUNARGS="-it --rm"
	fi

	REDISPORT=""
	if [ "$1" = "--direct" ]; then
		shift
		REDISPORT="-p $1:6379"
		echo "Exposing Redis Port $1"
		shift
	fi

	if [ $# -lt 2 ]; then
		echo "Usage: docweb redis:run [--debug] [--direct PORT] NAME PASSWORD"
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} $1 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop $1
		docker rm $1
	fi

	mkdir -p /home/$1/data

	# /myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf

	docker run $RUNARGS \
	--name="$1" \
	--hostname="$1" \
	--net=isolated_nw \
	--memory=512m \
	--volume=/home/$1/data:/data \
	$REDISPORT \
	redis:alpine redis-server --appendonly yes --requirepass "$2"

	exit 0
fi

if [ "$1" == "postgres:run" ]; then
	shift

	RUNARGS="-d --restart=always"
	if [ "$1" == "--debug" ]; then
		shift
		RUNARGS="-it --rm"
	fi

	if [ $# -lt 2 ]; then
		echo "Usage: docweb postgres:run [--debug] NAME POSTGRES_ROOT_PASSWORD"
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} $1 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop $1
		docker rm $1
	fi

	mkdir -p /home/$1/log
	mkdir -p /home/$1/data
	mkdir -p /home/$1/backup
	mkdir -p /home/$1/entrypoint

	docker run $RUNARGS \
	--name="$1" \
	--hostname="$1" \
	--net=isolated_nw \
	--memory=512m \
	-v /home/$1/backup:/backup \
	-v /home/$1/log:/var/log/postgresql \
	-v /home/$1/data:/var/lib/postgresql/data \
	-v /home/$1/entrypoint:/docker-entrypoint-initdb.d \
	-e POSTGRES_PASSWORD="$2" \
	postgres:10 #latest

	exit 0
fi

if [ "$1" == "postgres:listdbs" ] || [ "$1" == "postgres:listdb" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb postgres:listdbs NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'export COLUMNS=100; psql -U postgres -l'
	exit 0
fi

if [ "$1" == "postgres:backup" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb postgres:backup NAME [DATABASE]"
		exit 1
	fi

	PSQLSERVER=$1
	shift

	ISRUNNING=$(docker inspect --format={{.State.Running}} $PSQLSERVER 2> /dev/null)
	if [ $? -ne 0 ]; then
		echo "PostgreSQL instance $PSQLSERVER is not running."
		exit 1
	fi

	mkdir -p /home/$PSQLSERVER/backup
	if [ $# -lt 1 ]; then
		docker exec -u postgres $PSQLSERVER pg_dumpall -U postgres -c    > /home/$PSQLSERVER/backup/dump_$(date +%Y-%m-%d_%H-%M-%S).sql
	else
		docker exec -u postgres $PSQLSERVER pg_dump    -U postgres -c $1 > /home/$PSQLSERVER/backup/dump_$1_$(date +%Y-%m-%d_%H-%M-%S).sql
	fi
	exit 0
fi

if [ "$1" == "postgres:clean" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb postgres:clean NAME [DATABASE]"
		exit 1
	fi

	PSQLSERVER=$1
	shift

	ISRUNNING=$(docker inspect --format={{.State.Running}} $PSQLSERVER 2> /dev/null)
	if [ $? -ne 0 ]; then
		echo "PostgreSQL instance $PSQLSERVER is not running."
		exit 1
	fi

	if [ $# -lt 1 ]; then
		echo "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" | docker exec -i $PSQLSERVER psql -U postgres
	else
		echo "DROP SCHEMA public CASCADE; CREATE SCHEMA public;" | docker exec -i $PSQLSERVER psql -U postgres -d $1
	fi
	exit 0
fi

if [ "$1" == "postgres:restore" ]; then
	shift
	if [ $# -lt 2 ]; then
		echo "Usage: docweb postgres:restore NAME FILENAME [DATABASE]"
		exit 1
	fi

	PSQLSERVER=$1
	shift

	ISRUNNING=$(docker inspect --format={{.State.Running}} $PSQLSERVER 2> /dev/null)
	if [ $? -ne 0 ]; then
		echo "PostgreSQL instance $PSQLSERVER is not running."
		exit 1
	fi

	if [ $# -lt 2 ]; then
		cat /home/$PSQLSERVER/backup/$1 | docker exec -i $PSQLSERVER psql -U postgres
	else
		cat /home/$PSQLSERVER/backup/$1 | docker exec -i $PSQLSERVER psql -U postgres -d $2
	fi
	exit 0
fi

if [ "$1" == "mysql:run" ]; then
	shift

	RUNARGS="-d --restart=always"
	if [ "$1" == "--debug" ]; then
		shift
		RUNARGS="-it --rm"
	fi

	MYSQLPORT=""
	if [ "$1" = "--direct" ]; then
		shift
		MYSQLPORT="-p $1:3306"
		echo "Exposing MySQL Port $1"
		shift
	fi

	MEMORY=512
	if [ "$1" == "--memory" ]; then
		shift
		MEMORY=$1
		shift
	fi

	SKIPGRANT=""
	if [ "$1" == "--skip-grant" ]; then
		shift
		SKIPGRANT="mysqld_safe --skip-grant-tables"
	fi

	SKIPNET=""
	if [ "$1" == "--skip-net" ]; then
		shift
		SKIPNET="--skip-networking"
	fi

	if [ $# -lt 2 ]; then
		echo "Usage: docweb mysql:run [--debug] [--direct PORT] [--memory M] [--skip-grant] [--skip-net] NAME MYSQL_ROOT_PASSWORD [mysql|mariadb|mysql/mysql-server]"
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} $1 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop --time 86400 $1
		docker rm $1
	fi

	# https://hub.docker.com/_/mysql/
	# https://hub.docker.com/_/mariadb/
	# https://hub.docker.com/r/mysql/mysql-server/
	# https://hub.docker.com/_/percona/
	# https://hub.docker.com/r/percona/percona-server/
	# https://github.com/mysql/mysql-sys

	DBSERVER="mariadb"
	[[ $# -eq 3 ]] && DBSERVER="$3"
	echo "DBSERVER: $DBSERVER"

	rm   -rf /home/$1/conf.d
	rm   -rf /home/$1/log
	mkdir -p /home/$1/backup
	mkdir -p /home/$1/conf.d
	mkdir -p /home/$1/datadir
	mkdir -p /home/$1/entrypoint
	mkdir -p /home/$1/log
	chown -R 999:999 /home/$1/log

	cat > /home/$1/conf.d/global.cnf <<'EOL'
[mysqld]
default_storage_engine=InnoDB
skip_name_resolve=1
general_log=0
general_log_file=/var/log/mysql/general.log
innodb_fast_shutdown=0
innodb_file_per_table=1
innodb_lock_wait_timeout=120
local_infile=0
log_error=/var/log/mysql/error.log
log_warnings=2
long_query_time=1
max_allowed_packet=1G
max_connect_errors=1000000
max_connections=500
open_files_limit=100000
performance_schema=0
skip_external_locking=1
slow_query_log=1
slow_query_log_file=/var/log/mysql/slow.log
log_queries_not_using_indexes=0
character_set_server=utf8
character_set_filesystem=utf8
collation_server=utf8_unicode_ci
# symbolic-links=0
# character_set_results=utf8
# character_set_client_handshake=utf8
# character_set_connection=utf8
# collation_connection=utf8_unicode_ci
# sql_mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"
# skip-innodb_doublewrite
# innodb_doublewrite = 0

[client]
default-character-set=utf8

[mysqldump]
quick
max_allowed_packet=1G

[mysql]
default-character-set=utf8
no-auto-rehash

EOL

	echo "
[mysqld]
binlog_cache_size=4K
binlog_stmt_cache_size=4K
innodb_buffer_pool_instances=1
innodb_buffer_pool_size=$((MEMORY/4))M
# innodb_log_file_size * innodb_log_files_in_group should be equals to 1/4 of buffer pool size
# innodb_log_file_size=8M
innodb_ft_cache_size=4M
innodb_ft_total_cache_size=32M
innodb_sort_buffer_size=8M
join_buffer_size=4M
key_buffer_size=256K
max_heap_table_size=32M
query_cache_limit=512K
query_cache_min_res_unit=2K
query_cache_size=32M
query_cache_type=1
read_buffer_size=1M
read_rnd_buffer_size=1M
sort_buffer_size=4M
table_definition_cache=1K
table_open_cache=2K
thread_cache_size=16
tmp_table_size=32M

" > /home/$1/conf.d/limits.cnf

	# echo "
	# [client]
	# user=root
	# password=$2
	# host=127.0.0.1
	# " > /home/$1/conf.d/credentials.cnf

	docker run $RUNARGS \
	--name="$1" \
	--hostname="$1" \
	--net=isolated_nw \
	--memory=${MEMORY}m \
	$MYSQLPORT \
	-v /home/$1/backup:/backup \
	-v /home/$1/conf.d:/etc/mysql/conf.d \
	-v /home/$1/datadir:/var/lib/mysql \
	-v /home/$1/entrypoint:/docker-entrypoint-initdb.d \
	-v /home/$1/log:/var/log/mysql \
	-e MYSQL_ROOT_PASSWORD="$2" \
	${DBSERVER}:latest $SKIPGRANT $SKIPNET

	# docker exec -it $1 sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "FLUSH PRIVILEGES; SET PASSWORD FOR root = PASSWORD(\"$1\");"'

	exit 0
fi

if [ "$1" == "mysql:stop" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:stop NAME"
		exit 1
	fi
	#docker exec -it $1 sh -c 'exec mysqladmin -uroot -p"$MYSQL_ROOT_PASSWORD" shutdown'
	#docker exec -it $1 sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SET GLOBAL innodb_fast_shutdown = 0"'
	#sleep 2
	docker stop --time 86400 $1
	#docker kill --signal TERM $1
	docker rm $1
	exit 0
fi

if [ "$1" == "mysql:upgrade" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:stop NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'exec mysql_upgrade -uroot -p"$MYSQL_ROOT_PASSWORD"'
	exit 0
fi

if [ "$1" == "mysql:client" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:client NAME [--bash]"
		exit 1
	fi
	if [ "$2" == "--bash" ]; then
		docker exec -it $1 bash
	else
		docker exec -it $1 sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'
	fi
	exit 0
fi

if [ "$1" == "mysql:status" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:status NAME"
		exit 1
	fi
	# SHOW ENGINE INNODB STATUSG
	printf "$(docker exec -it $1 sh -c 'exec mysql -N -B -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SHOW ENGINE INNODB STATUS"')"
	exit 0
fi

if [ "$1" == "mysql:report" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:report NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'exec mysqlreport --user root --password "$MYSQL_ROOT_PASSWORD"'
	exit 0
fi

if [ "$1" == "mysql:optimize" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:optimize NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'exec mysqlcheck -o --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"'
	exit 0
fi

if [ "$1" == "mysql:createuser" ]; then
	shift
	if [ "$#" -ne 3 ]; then
		echo "Usage: docweb mysql:createuser NAME USERNAME PASSWORD"
		exit 1
	fi

	# FLUSH PRIVILEGES;
	# CREATE USER IF NOT EXISTS '$2'@'%' IDENTIFIED WITH mysql_native_password BY '$3';
	# docker exec <<EOF ... EOF

	echo "
	CREATE USER IF NOT EXISTS '$2'@'%' IDENTIFIED BY '$3';
	GRANT USAGE ON *.* TO '$2'@'%' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;
	CREATE DATABASE IF NOT EXISTS \`$2\` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
	GRANT ALL PRIVILEGES ON \`$2\`.* TO '$2'@'%';
	GRANT ALL PRIVILEGES ON \`$2\_%\`.* TO '$2'@'%';
	" > sql.tmp

	cat sql.tmp | docker exec -i $1 sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'
	rm sql.tmp
	exit 0
fi

if [ "$1" == "mysql:createdb" ]; then
	shift
	if [ "$#" -lt 2 ]; then
		echo "Usage: docweb mysql:createdb MYSQLSERVER DBNAME"
		exit 1
	fi
	echo "CREATE DATABASE IF NOT EXISTS \`$2\` DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;" | docker exec -i $1 sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'
	exit 0
fi

if [ "$1" == "mysql:backup" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:backup NAME [--gzip] [DATABASES...]"
		exit 1
	fi
	MYSQLSERVER=$1
	shift
	ISRUNNING=$(docker inspect --format={{.State.Running}} $MYSQLSERVER 2> /dev/null)
	if [ $? -ne 0 ]; then
		echo "MySQL instance $MYSQLSERVER is not running."
		exit 1
	fi
	#set -x
	if [ "$1" == "--gzip" ]; then
		shift
		if [ $# -lt 1 ]; then
			docker exec -it $MYSQLSERVER sh -c \
				'mysql -N -B -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SHOW DATABASES;" | grep -v -e ^information_schema$ -e ^performance_schema$ -e ^mysql$ -e ^sys$ | xargs mysqldump -uroot -p"$MYSQL_ROOT_PASSWORD" --skip-comments --default-character-set=utf8 --databases | gzip -5 > /backup/dump_$(date +%Y-%m-%d_%H-%M-%S).sql.gz'
		else
			docker exec -it $MYSQLSERVER sh -c \
				"mysqldump -uroot -p\"\$MYSQL_ROOT_PASSWORD\" --skip-comments --default-character-set=utf8 --databases $(IFS=$' ' ; echo "$*") | gzip -5 > /backup/dump_$(IFS=_ ; echo "$*")_\$(date +%Y-%m-%d_%H-%M-%S).sql.gz"
			if [ $# -eq 1 ] && [ -d /home/$1 ]; then
				mkdir -p /home/$1/backup/db
				mv /home/$MYSQLSERVER/backup/dump_${1}_*.sql.gz /home/$1/backup/db/
			fi
		fi
	else
		if [ $# -lt 1 ]; then
			docker exec -it $MYSQLSERVER sh -c \
				'mysql -N -B -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SHOW DATABASES;" | grep -v -e ^information_schema$ -e ^performance_schema$ -e ^mysql$ -e ^sys$ | xargs mysqldump -uroot -p"$MYSQL_ROOT_PASSWORD" --skip-comments --default-character-set=utf8 --result-file /backup/dump_$(date +%Y-%m-%d_%H-%M-%S).sql --databases'
		else
			docker exec -it $MYSQLSERVER sh -c \
				"mysqldump -uroot -p\"\$MYSQL_ROOT_PASSWORD\" --skip-comments --default-character-set=utf8 --result-file /backup/dump_"$(IFS=_ ; echo "$*")"_\$(date +%Y-%m-%d_%H-%M-%S).sql --databases $(IFS=$' ' ; echo "$*")"
			if [ $# -eq 1 ] && [ -d /home/$1 ]; then
				mkdir -p /home/$1/backup/db
				mv /home/$MYSQLSERVER/backup/dump_${1}_*.sql /home/$1/backup/db/
			fi
		fi
	fi
	# https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html
	# --default-character-set=utf8
	# --add-locks
	# --master-data
	# --quick
	# TODO: --single-transaction
	exit 0
fi

if [ "$1" == "mysql:import" ]; then
	shift
	if [ $# -lt 2 ]; then
		echo "Usage: docweb mysql:import NAME [--gzip] FILENAME [DATABASE]"
		exit 1
	fi
	MYSQLSERVER=$1
	shift
	ISRUNNING=$(docker inspect --format={{.State.Running}} $MYSQLSERVER 2> /dev/null)
	if [ $? -ne 0 ]; then
		echo "MySQL instance $MYSQLSERVER is not running."
		exit 1
	fi
	if [ "$1" == "--gzip" ]; then
		shift
		if [ $# -lt 1 ]; then
			echo "Usage: docweb mysql:import NAME [--gzip] FILENAME [DATABASE]"
			exit 1
		fi
		docker exec -it $MYSQLSERVER sh -c "gunzip < /backup/$1 | mysql -uroot -p\"\$MYSQL_ROOT_PASSWORD\" $2"
	else
		if [ $# -lt 1 ]; then
			echo "Usage: docweb mysql:import NAME [--gzip] FILENAME [DATABASE]"
			exit 1
		fi
		docker exec -it $MYSQLSERVER sh -c "mysql -uroot -p\"\$MYSQL_ROOT_PASSWORD\" $2 < /backup/$1"
	fi
	exit 0
fi

if [ "$1" == "mysql:backupusers" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:backupusers NAME"
		exit 1
	fi
	MYSQLSERVER=$1
	shift
	ISRUNNING=$(docker inspect --format={{.State.Running}} $MYSQLSERVER 2> /dev/null)
	if [ $? -ne 0 ]; then
		echo "MySQL instance $MYSQLSERVER is not running."
		exit 1
	fi
	# TODO:
	# mysql.user
	# mysql.db
	# mysqldump -u root -p mysql user > user_table_dump.sql
	exit 0
fi

if [ "$1" == "mysql:listdbs" ] || [ "$1" == "mysql:listdb" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:listdbs NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'mysql -t -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SHOW DATABASES;" | grep -v -e "^| information_schema \+|$" -e "^| performance_schema \+|$" -e "^| mysql \+|$" -e "^| sys \+|$"'
	exit 0
fi

if [ "$1" == "mysql:listusers" ] || [ "$1" == "mysql:listuser" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:listusers NAME [--all]"
		exit 1
	fi
	if [ "$2" == "--all" ]; then
		docker exec -it $1 sh -c \
		'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SELECT * FROM mysql.user;"'
	else
		docker exec -it $1 sh -c \
		'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SELECT Host,User,max_questions,max_updates,max_connections,max_user_connections,password_expired FROM mysql.user;"'
		# password_last_changed, password_lifetime, account_locked
	fi
	exit 0
fi

if [ "$1" == "mysql:listproc" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:listproc NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "SHOW PROCESSLIST"'
	exit 0
fi

if [ "$1" == "mysql:upgrade" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb mysql:upgrade NAME"
		exit 1
	fi
	docker exec -it $1 sh -c 'exec mysql_upgrade -uroot -p"$MYSQL_ROOT_PASSWORD"'
	exit 0
fi

if [ "$1" == "mssql:run" ]; then
	shift

	RUNARGS="-d --restart=always"
	if [ "$1" == "--debug" ]; then
		shift
		RUNARGS="-it --rm"
	fi

	if [ $# -lt 2 ]; then
		echo "Usage: docweb mssql:run [--debug] NAME SA_PASSWORD"
		exit 1
	fi

	ISRUNNING=$(docker inspect --format={{.State.Running}} $1 2> /dev/null)
	if [ $? -eq 0 ]; then
		echo "Stopping the running instance ..."
		docker stop $1
		docker rm $1
	fi

	mkdir -p /home/$1

	docker run $RUNARGS \
	--name="$1" \
	--hostname="$1" \
	--net=isolated_nw \
	--memory=512m \
	-v /home/$1:/var/opt/mssql \
	-e 'ACCEPT_EULA=Y' \
	-e SA_PASSWORD="$2" \
	microsoft/mssql-server-linux:latest

	exit 0
fi

if [ "$1" == "memcache:run" ]; then
	shift
	# https://hub.docker.com/_/memcached/
	exit 0
fi

if [ "$1" == "mailfwd:run" ]; then
	shift

	ISRUNNING=$(docker inspect --format={{.State.Running}} mailfwd 2> /dev/null)
	[ $? -eq 0 ] &&	docker rm -f mailfwd

	mkdir -p /home/mailfwd
	[ ! -f /home/mailfwd/mail.conf ] && echo "@example.com:fffaraz@gmail.com" > /home/mailfwd/mail.conf

	docker run -d --restart=always \
	--name mailfwd -p 25:25 \
	--memory 64m \
	-e SMF_CONFIG="$(cat /home/mailfwd/mail.conf)" \
	zixia/simple-mail-forwarder:latest

	exit 0
fi

if [ "$1" == "volume:create" ]; then
	shift
	if [ $# -lt 2 ]; then
		echo "Usage: docweb volume:create NAME SIZE"
		exit 1
	fi
	mkdir -p /home/img
	truncate -s $2 /home/img/$1.img
	mkfs.ext4 /home/img/$1.img
	mkdir -p /home/$1
	mount /home/img/$1.img /home/$1
	# http://stackoverflow.com/questions/257844/quickly-create-a-large-file-on-a-linux-system
	# https://docs.docker.com/engine/reference/commandline/run/#/set-storage-driver-options-per-container
	# http://stackoverflow.com/questions/29029326/how-to-define-a-disk-quota-for-docker-containers
	exit 0
fi

if [ "$1" == "wpscan" ]; then
	shift
	if [ $# -lt 1 ]; then
		echo "Usage: docweb wpscan URL"
		exit 1
	fi
	docker run --rm -it wpscanteam/wpscan --url $1
	exit 0
fi

if [ "$1" == "ssh" ]; then
	shift
	# https://github.com/tg123/sshpiper
	exit 0
fi

if [ "$1" == "bootstrap" ]; then
	set -euxo pipefail
	export DEBIAN_FRONTEND=noninteractive
	apt-get -yq update < /dev/null
	apt-get -yq upgrade < /dev/null
	apt-get -yq dist-upgrade < /dev/null
	apt-get -yq install dnsutils sysstat < /dev/null
	$0 install:extras
	$0 install:docker
	$0 install:network
	$0 install:aliases
	apt-get -yq autoremove < /dev/null
	apt-get -yq autoclean < /dev/null
	exit 0
fi

if [ "$1" == "install:swapfile" ]; then
	shift
	if [ $# -lt 1 ] || [ $1 -lt 512 ]; then
		echo "Usage: docweb install:swapfile SIZE_IN_MB"
		exit 1
	fi
	set -euxo pipefail
	dd if=/dev/zero of=/swapfile bs=32M count=$(( $1 / 32 ))
	chown root:root /swapfile
	chmod 0600 /swapfile
	mkswap /swapfile
	echo "/swapfile none swap sw 0 0" >> /etc/fstab
	echo "vm.swappiness=10" >> /etc/sysctl.conf
	echo "vm.vfs_cache_pressure=50" >> /etc/sysctl.conf
	swapon /swapfile
	sysctl vm.swappiness=10
	sysctl vm.vfs_cache_pressure=50
	exit 0
fi

if [ "$1" == "install:extras" ]; then
	apt-get -yq install apache2-utils curl dstat atop htop iftop iotop joe-jupp logtop lsof pv pwgen p7zip-full smem sysstat tree vnstat unzip ncdu wget whois < /dev/null

	wget -O- https://bit.ly/glances | /bin/bash

	wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
	chmod +x speedtest-cli

	wget -O /usr/local/bin/httpstat https://raw.githubusercontent.com/reorx/httpstat/master/httpstat.py
	chmod +x /usr/local/bin/httpstat

	wget -O /usr/local/bin/ctop https://github.com/bcicen/ctop/releases/download/v0.6.1/ctop-0.6.1-linux-amd64
	chmod +x /usr/local/bin/ctop

	curl -sSf https://moncho.github.io/dry/dryup.sh | sh
	chmod 755 /usr/local/bin/dry

	exit 0
fi

if [ "$1" == "install:docker" ]; then
	set -euxo pipefail
	apt-get -yq install apt-transport-https ca-certificates < /dev/null
	apt-get -yq install linux-image-extra-$(uname -r) linux-image-extra-virtual < /dev/null
	# TODO: zfs ?

	# wget -qO- https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh | /bin/bash
	wget -qO- https://get.docker.com/ | sh

	# https://docs.docker.com/compose/install/
	# https://github.com/docker/compose/releases
	curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose

	#apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
	#echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" > /etc/apt/sources.list.d/docker.list
	#apt-get -yq update < /dev/null
	#apt-get -yq install docker-engine < /dev/null

	exit 0
fi

if [ "$1" == "install:youtube-dl" ]; then
	set -x
	apt-get -yq install ffmpeg < /dev/null
	wget -q https://yt-dl.org/downloads/latest/youtube-dl -O /usr/local/bin/youtube-dl
	chmod a+rx /usr/local/bin/youtube-dl
	youtube-dl -U
	exit 0
fi

if [ "$1" == "install:network" ]; then
	docker network create --driver bridge isolated_nw
	exit 0
fi

if [ "$1" == "install:aliases" ]; then
	# https://gist.github.com/jverdeyen/741d29a8e8d7a8e5d4dd4346fd1bd788
	# https://gist.github.com/f3l1x/4c3bb59397d976ac83f0
	echo 'alias dps="docweb ps"' >> ~/.bash_aliases
	echo 'alias dpsa="docker ps -a -s | less -S"' >> ~/.bash_aliases
	echo 'alias gitcam="git commit -a -m"' >> ~/.bash_aliases
	echo 'alias gits="git status"' >> ~/.bash_aliases
	echo 'alias gitpp="git pull; git push;"' >> ~/.bash_aliases
	echo 'alias cdh="cd /home"' >> ~/.bash_aliases
	exit 0
fi

if [ "$1" == "install:webmin" ]; then
	echo "deb https://download.webmin.com/download/repository sarge contrib" > /etc/apt/sources.list.d/webmin.list
	cd /root
	wget -q http://www.webmin.com/jcameron-key.asc
	apt-key add jcameron-key.asc
	apt-get -yq update < /dev/null
	apt-get -yq install apt-transport-https < /dev/null
	apt-get -yq install webmin < /dev/null
	cd ~-
	exit 0
fi

if [ "$1" == "upgrade" ] || [ "$1" == "pull" ]; then
	cd /opt/dockerweb
	git pull
	cd ~-
	exit 0
fi

if [ "$1" == "upgrade:os" ]; then
	export DEBIAN_FRONTEND=noninteractive
	apt-get -yq update < /dev/null
	apt-get -yq upgrade < /dev/null
	apt-get -yq dist-upgrade < /dev/null
	apt-get -yq autoremove < /dev/null
	apt-get -yq autoclean < /dev/null
	apt-get -yq clean < /dev/null
	#do-release-upgrade
	exit 0
fi

if [ "$1" == "dockly" ]; then
	docker run -it --rm --name dockly -v /var/run/docker.sock:/var/run/docker.sock lirantal/dockly
	exit 0
fi

if [ "$1" == "artisan" ]; then
	ps aux | grep artisan
	exit 0
fi

if [ "$1" == "geekbench" ]; then
	# https://github.com/davidsarkany/docker-geekbench
	docker run --rm davidsarkany/geekbench
	exit 0
fi

echo "Unknown command '$1'"
exit 1
